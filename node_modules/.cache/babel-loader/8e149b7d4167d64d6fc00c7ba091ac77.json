{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Owner\\\\Desktop\\\\mojave\\\\week4\\\\jmdb\\\\src\\\\components\\\\Movie\\\\Movie.js\";\nimport React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movie: null,\n      actors: null,\n      directors: [],\n      loading: false\n    };\n\n    this.fetchItems = endpoint => {\n      const {\n        movieId\n      } = this.props.match.params;\n      fetch(endpoint).then(result => result.json()).then(result => {\n        if (result.status_code) {\n          // If we don't find any movie\n          this.setState({\n            loading: false\n          });\n        } else {\n          this.setState({\n            movie: result\n          }, () => {\n            let endpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint).then(result => result.json()).then(result => {\n              const directors = result.crew.filter(member => member.job === \"Director\");\n              this.setState({\n                actors: result.cast,\n                directors,\n                loading: false\n              }, () => {\n                localStorage.setItem(`${movieId}`, JSON.stringify(this.state));\n              });\n            });\n          });\n        }\n      }).catch(error => console.error('Error:', error));\n    };\n  }\n\n  componentDidMount() {\n    const {\n      movieId\n    } = this.props.match.params;\n\n    if (localStorage.getItem(`${movieId}`)) {\n      let state = JSON.parse(localStorage.getItem(`${movieId}`));\n      this.setState({ ...state\n      });\n    } else {\n      this.setState({\n        loading: true\n      }); // First fetch the movie ...\n\n      let endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  render() {\n    // ES6 Destructuring the props and state\n    const {\n      movieName\n    } = this.props.location;\n    const {\n      movie,\n      directors,\n      actors,\n      loading\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rmdb-movie\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, movie ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Navigation, {\n      movie: movieName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(MovieInfo, {\n      movie: movie,\n      directors: directors,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(MovieInfoBar, {\n      time: movie.runtime,\n      budget: movie.budget,\n      revenue: movie.revenue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    })) : null, actors ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"rmdb-movie-grid\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(FourColGrid, {\n      header: 'Actors',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, actors.map((element, i) => /*#__PURE__*/React.createElement(Actor, {\n      key: i,\n      actor: element,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    })))) : null, !actors && !loading ? /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 32\n      }\n    }, \"No movie found\") : null, loading ? /*#__PURE__*/React.createElement(Spinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 20\n      }\n    }) : null);\n  }\n\n}\n\nexport default Movie;","map":{"version":3,"sources":["C:/Users/Owner/Desktop/mojave/week4/jmdb/src/components/Movie/Movie.js"],"names":["React","Component","API_URL","API_KEY","Navigation","MovieInfo","MovieInfoBar","FourColGrid","Actor","Spinner","Movie","state","movie","actors","directors","loading","fetchItems","endpoint","movieId","props","match","params","fetch","then","result","json","status_code","setState","crew","filter","member","job","cast","localStorage","setItem","JSON","stringify","catch","error","console","componentDidMount","getItem","parse","render","movieName","location","runtime","budget","revenue","map","element","i"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { API_URL, API_KEY } from '../../config';\nimport Navigation from '../elements/Navigation/Navigation';\nimport MovieInfo from '../elements/MovieInfo/MovieInfo';\nimport MovieInfoBar from '../elements/MovieInfoBar/MovieInfoBar';\nimport FourColGrid from '../elements/FourColGrid/FourColGrid.js';\nimport Actor from '../elements/Actor/Actor';\nimport Spinner from '../elements/Spinner/Spinner';\nimport './Movie.css';\n\nclass Movie extends Component {\n  state = {\n    movie: null,\n    actors: null,\n    directors: [],\n    loading: false\n  }\n\n  componentDidMount() {\n    const { movieId } = this.props.match.params;\n\n    if (localStorage.getItem(`${movieId}`)) {\n      let state = JSON.parse(localStorage.getItem(`${movieId}`))\n      this.setState({ ...state })\n    } else {\n      this.setState({ loading: true })\n      // First fetch the movie ...\n      let endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`;\n      this.fetchItems(endpoint);\n    }\n  }\n\n  fetchItems = (endpoint) => {\n    const { movieId } = this.props.match.params;\n\n    fetch(endpoint)\n      .then(result => result.json())\n      .then(result => {\n\n        if (result.status_code) {\n          // If we don't find any movie\n          this.setState({ loading: false });\n        } else {\n          this.setState({ movie: result }, () => {\n            let endpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n            fetch(endpoint)\n              .then(result => result.json())\n              .then(result => {\n\n                const directors = result.crew.filter((member) => member.job === \"Director\");\n\n                this.setState({\n                  actors: result.cast,\n                  directors,\n                  loading: false\n                }, () => {\n                  localStorage.setItem(`${movieId}`, JSON.stringify(this.state));\n                })\n              })\n          })\n        }\n      })\n      .catch(error => console.error('Error:', error))\n  }\n\n  render() {\n    // ES6 Destructuring the props and state\n    const { movieName } = this.props.location;\n    const { movie, directors, actors, loading } = this.state;\n\n    return (\n      <div className=\"rmdb-movie\">\n        {movie ?\n          <div>\n            <Navigation movie={movieName} />\n            <MovieInfo movie={movie} directors={directors} />\n            <MovieInfoBar time={movie.runtime} budget={movie.budget} revenue={movie.revenue} />\n          </div>\n          : null}\n        {actors ?\n          <div className=\"rmdb-movie-grid\">\n            <FourColGrid header={'Actors'}>\n              {actors.map((element, i) => (\n                <Actor key={i} actor={element} />\n              ))}\n            </FourColGrid>\n          </div>\n          : null}\n        {!actors && !loading ? <h1>No movie found</h1> : null}\n        {loading ? <Spinner /> : null}\n      </div>\n    )\n  }\n}\n\nexport default Movie;"]},"metadata":{},"sourceType":"module"}